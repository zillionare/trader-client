{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5927\u5bcc\u7fc1\u4ea4\u6613\u5ba2\u6237\u7aef \u00b6 trade-client\u662f\u5927\u5bcc\u7fc1\u91cf\u5316\u6846\u67b6\u4e2d\u7528\u6765\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u3002\u5b83\u5bf9\u56de\u6d4b\u548c\u5b9e\u76d8\u63d0\u4f9b\u4e86\u51e0\u4e4e\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u7ecf\u8fc7\u56de\u6d4b\u7684\u7b56\u7565\uff0c\u53ef\u4ee5\u65e0\u7f1d\u5207\u6362\u5230\u5b9e\u76d8\u73af\u5883\u4e2d\u3002 \u529f\u80fd \u00b6 \u8fdb\u884c\u5b9e\u76d8\u548c\u56de\u6d4b\u4ea4\u6613 \u83b7\u53d6\u8d26\u53f7\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u672c\u91d1\u3001\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u76c8\u4e8f\u53ca\u76c8\u4e8f\u6bd4\u7b49\u3002 \u4ea4\u6613\u51fd\u6570\uff0c\u6bd4\u5982\u4e70\u5165\uff08\u9650\u4ef7\u548c\u5e02\u4ef7\uff09\u3001\u5356\u51fa\uff08\u9650\u4ef7\u548c\u5e02\u4ef7\uff09\u3001\u64a4\u5355\u7b49 \u67e5\u8be2\u59d4\u6258\u3001\u6210\u4ea4\u3001\u6301\u4ed3\uff08\u5f53\u65e5\u548c\u6307\u5b9a\u65e5\u671f\uff09 \u67e5\u8be2\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u8d26\u6237\u8bc4\u4f30\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, voliality, win rate, max drawdown\u7b49\u3002 \u67e5\u8be2\u53c2\u7167\u6807\u7684\u540c\u671f\u6307\u6807\u3002 Credits \u00b6 This package was created with zillionare/python project wizard project template.","title":"Home"},{"location":"#\u5927\u5bcc\u7fc1\u4ea4\u6613\u5ba2\u6237\u7aef","text":"trade-client\u662f\u5927\u5bcc\u7fc1\u91cf\u5316\u6846\u67b6\u4e2d\u7528\u6765\u4ea4\u6613\u7684\u5ba2\u6237\u7aef\u3002\u5b83\u5bf9\u56de\u6d4b\u548c\u5b9e\u76d8\u63d0\u4f9b\u4e86\u51e0\u4e4e\u76f8\u540c\u7684\u63a5\u53e3\uff0c\u4ece\u800c\u4f7f\u5f97\u7ecf\u8fc7\u56de\u6d4b\u7684\u7b56\u7565\uff0c\u53ef\u4ee5\u65e0\u7f1d\u5207\u6362\u5230\u5b9e\u76d8\u73af\u5883\u4e2d\u3002","title":"\u5927\u5bcc\u7fc1\u4ea4\u6613\u5ba2\u6237\u7aef"},{"location":"#\u529f\u80fd","text":"\u8fdb\u884c\u5b9e\u76d8\u548c\u56de\u6d4b\u4ea4\u6613 \u83b7\u53d6\u8d26\u53f7\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u672c\u91d1\u3001\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u76c8\u4e8f\u53ca\u76c8\u4e8f\u6bd4\u7b49\u3002 \u4ea4\u6613\u51fd\u6570\uff0c\u6bd4\u5982\u4e70\u5165\uff08\u9650\u4ef7\u548c\u5e02\u4ef7\uff09\u3001\u5356\u51fa\uff08\u9650\u4ef7\u548c\u5e02\u4ef7\uff09\u3001\u64a4\u5355\u7b49 \u67e5\u8be2\u59d4\u6258\u3001\u6210\u4ea4\u3001\u6301\u4ed3\uff08\u5f53\u65e5\u548c\u6307\u5b9a\u65e5\u671f\uff09 \u67e5\u8be2\u4e00\u6bb5\u65f6\u95f4\u5185\u7684\u8d26\u6237\u8bc4\u4f30\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, voliality, win rate, max drawdown\u7b49\u3002 \u67e5\u8be2\u53c2\u7167\u6807\u7684\u540c\u671f\u6307\u6807\u3002","title":"\u529f\u80fd"},{"location":"#credits","text":"This package was created with zillionare/python project wizard project template.","title":"Credits"},{"location":"api/","text":"client \u00b6 TraderClient \u00b6 \u5927\u5bcc\u7fc1\u5b9e\u76d8\u548c\u56de\u6d4b\u7684\u5ba2\u6237\u7aef\u3002 \u5728\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5148\u6784\u5efa\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u518d\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5e76\u5904\u7406 traderclient.errors.TradeError \u7684\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 status_code \u548c message \u6765\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u4e00\u822c\u4f1a\u5728\u56de\u6d4b\u7ed3\u675f\u65f6\u8c03\u7528 metrics \u65b9\u6cd5\u6765\u67e5\u770b\u7b56\u7565\u8bc4\u4f30\u7ed3\u679c\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u67e5\u770b\u4fe1\u606f\uff0c\u53ef\u4ee5\u8c03\u7528 bills \u65b9\u6cd5\u6765\u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u3001\u4ea4\u6613\u8bb0\u5f55\u548c\u6bcf\u65e5\u8d44\u4ea7\u6570\u636e\u3002 Source code in traderclient/client.py class TraderClient : \"\"\"\u5927\u5bcc\u7fc1\u5b9e\u76d8\u548c\u56de\u6d4b\u7684\u5ba2\u6237\u7aef\u3002 \u5728\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5148\u6784\u5efa\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u518d\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5e76\u5904\u7406[traderclient.errors.TradeError][]\u7684\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7`status_code`\u548c`message`\u6765\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u4e00\u822c\u4f1a\u5728\u56de\u6d4b\u7ed3\u675f\u65f6\u8c03\u7528`metrics`\u65b9\u6cd5\u6765\u67e5\u770b\u7b56\u7565\u8bc4\u4f30\u7ed3\u679c\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u67e5\u770b\u4fe1\u606f\uff0c\u53ef\u4ee5\u8c03\u7528`bills`\u65b9\u6cd5\u6765\u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u3001\u4ea4\u6613\u8bb0\u5f55\u548c\u6bcf\u65e5\u8d44\u4ea7\u6570\u636e\u3002 \"\"\" def __init__ ( self , url : str , acct : str , token : str , is_backtest : bool = False , ** kwargs ): \"\"\"\u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53`is_backtest`\u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info: \u5982\u679c`url`\u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46`is_backtest`\u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Args: url : \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 acct : \u5b50\u8d26\u53f7 token : \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c is_backtest : \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 Keyword Args: principal: float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission: float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start: datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end: datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 \"\"\" # todo: capital is renamed to principal self . _url = url . rstrip ( \"/\" ) self . _token = token self . _account = acct self . headers = { \"Authorization\" : self . _token } self . headers [ \"Account\" ] = self . _account self . _is_backtest = is_backtest if is_backtest : principal = kwargs . get ( \"principal\" , 1_000_000 ) commission = kwargs . get ( \"commission\" , 1e-4 ) start = kwargs . get ( \"start\" ) end = kwargs . get ( \"end\" ) if start is None or end is None : raise ValueError ( \"start and end must be specified in backtest mode\" ) self . _start_backtest ( acct , token , principal , commission , start , end ) def _cmd_url ( self , cmd : str ) -> str : return f \" { self . _url } / { cmd } \" def _start_backtest ( self , acct : str , token : str , principal : float , commission : float , start : datetime . date , end : datetime . date , ): \"\"\"\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u8d26\u6237 Args: acct : \u8d26\u53f7\u540d token : \u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c principal : \u521d\u59cb\u8d44\u91d1 commission : \u624b\u7eed\u8d39\u7387 start : \u56de\u6d4b\u5f00\u59cb\u65e5\u671f end : \u56de\u6d4b\u7ed3\u675f\u65e5\u671f \"\"\" url = self . _cmd_url ( \"start_backtest\" ) data = { \"name\" : acct , \"token\" : token , \"principal\" : principal , \"commission\" : commission , \"start\" : start . isoformat (), \"end\" : end . isoformat (), } post_json ( url , data ) def info ( self ) -> Dict : \"\"\"\u8d26\u6237\u4fe1\u606f Returns: - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" # todo: added pnl, ppnl. available, market_value # todo: removed trades # todo: rename capital to principal # todo: server should use r.raw to return pickled object url = self . _cmd_url ( \"info\" ) return get ( url , headers = self . headers ) def balance ( self ) -> Dict : \"\"\"\u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Dict: \u8d26\u6237\u4f59\u989d\u4fe1\u606f - available: \u73b0\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - assets: \u8d26\u6237\u603b\u8d44\u4ea7 - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal \"\"\" # todo: removed account # todo: removed /balance from server routing, using info instead # todo: total has been renamed to assets url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return { \"available\" : r [ \"available\" ], \"market_value\" : r [ \"market_value\" ], \"assets\" : r [ \"assets\" ], \"pnl\" : r [ \"pnl\" ], \"ppnl\" : r [ \"ppnl\" ], } @property def account ( self ) -> str : return self . _account @property def available_money ( self ) -> float : \"\"\"\u53d6\u5f53\u524d\u8d26\u6237\u7684\u53ef\u7528\u91d1\u989d\u3002\u7b56\u7565\u51fd\u6570\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u6570\u636e\u8fdb\u884c\u4ed3\u4f4d\u8ba1\u7b97 Returns: float: \u8d26\u6237\u53ef\u7528\u8d44\u91d1 \"\"\" url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return r . get ( \"available\" ) @property def principal ( self ) -> float : \"\"\"\u8d26\u6237\u672c\u91d1 Returns: \u672c\u91d1 \"\"\" if self . _is_backtest : return self . _principal url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return r . get ( \"principal\" ) def positions ( self , dt : datetime . date = None ) -> np . ndarray : \"\"\"\u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning: \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Args: dt: \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f Returns: np.ndarray: \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 \"\"\" # todo: \u8fd4\u56de\u7c7b\u578b\u66f4\u6539\u4e3anp.ndarray\uff0c\u5b57\u6bb5\u589e\u52a0alias # todo: \u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528r.raw\u6765\u8fd4\u56depickle\u5bf9\u8c61 url = self . _cmd_url ( \"positions\" ) r = get ( url , params = { \"date\" : dt }, headers = self . headers ) return r def available_shares ( self , security : str ) -> int : \"\"\"\u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Args: security: \u80a1\u7968\u4ee3\u7801 Returns: int: \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 \"\"\" # todo: remove available_shares from server routing url = self . _cmd_url ( \"positions\" ) r = get ( url , headers = self . headers ) found = r [ r [ \"security\" ] == security ] if found . size == 1 : return found [ \"sellable\" ][ 0 ] . item () elif found . size == 0 : return 0 else : logger . warning ( \"found more than one position entry in response: %s \" , found ) def today_entrusts ( self ) -> List : \"\"\"\u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: List: \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy \"\"\" url = self . _cmd_url ( \"today_entrusts\" ) return get ( url , headers = self . headers ) def cancel_entrust ( self , cid : str ) -> Dict : \"\"\"\u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: cid (str): \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 Returns: Dict: \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003`buy`\u7684\u7ed3\u679c \"\"\" # todo: return type? url = self . _cmd_url ( \"cancel_entrust\" ) data = { \"cid\" : cid } return post_json ( url , params = data , headers = self . headers ) def cancel_all_entrusts ( self ) -> Dict : \"\"\"\u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Dict: \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy \"\"\" # todo: check return type? url = self . _cmd_url ( \"cancel_all_entrusts\" ) return post_json ( url , headers = self . headers ) def buy ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u8bc1\u5238\u4e70\u5165 Notes: \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"buy\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def market_buy ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u4e70\u5165\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"market_buy\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes: \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict or List: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"sell\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive for rec in r : rec [ \"time\" ] = arrow . get ( rec [ \"time\" ]) . naive return r def market_sell ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u5356\u51fa\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"market_sell\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell_percent ( self , security : str , price : float , percent : float , timeout : int = 0.5 ) -> Dict : \"\"\"\u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes: \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Args: security (str): \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 price (float): \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: Dict: \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None if len ( security ) < 6 : return None url = self . _cmd_url ( \"sell_percent\" ) parameters = { \"security\" : security , \"price\" : price , \"timeout\" : timeout , } r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell_all ( self , percent : float , timeout : float = 0.5 ) -> List : \"\"\"\u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: List: \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None url = self . _cmd_url ( \"sell_all\" ) parameters = { \"percent\" : percent , \"timeout\" : timeout , } return post_json ( url , params = parameters , headers = self . headers ) def metrics ( self , start : datetime . date = None , end : datetime . date = None , baseline : str = None , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Args: start: \u8d77\u59cb\u65e5\u671f end: \u7ed3\u675f\u65e5\u671f baseline: the security code for baseline Returns: Dict: \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" url = self . _cmd_url ( \"metrics\" ) params = { \"start\" : start . strftime ( \"%Y-%m- %d \" ) if start else None , \"end\" : end . strftime ( \"%Y-%m- %d \" ) if end else None , \"baseline\" : baseline , } return get ( url , headers = self . headers , params = params ) def bills ( self ) -> Dict : \"\"\"\u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Dict: \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f - trades - positions - assets - tx \"\"\" url = self . _cmd_url ( \"bills\" ) return get ( url , headers = self . headers ) @staticmethod def list_accounts ( url_prefix : str , admin_token : str ) -> List : \"\"\"\u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Args: url_prefix : \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 admin_token : \u7ba1\u7406\u5458token Returns: \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373`info`\u8fd4\u56de\u7684\u4fe1\u606f \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : admin_token } return get ( url , headers = headers ) @staticmethod def delete_account ( url_prefix : str , account_name : str , token : str ) -> int : \"\"\"\u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Args: url_prefix (str): \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 account_name (str): \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d token (str): \u8d26\u6237token Returns: \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : token } return delete ( url , headers = headers , params = { \"name\" : account_name }) available_money : float property readonly \u00b6 \u53d6\u5f53\u524d\u8d26\u6237\u7684\u53ef\u7528\u91d1\u989d\u3002\u7b56\u7565\u51fd\u6570\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u6570\u636e\u8fdb\u884c\u4ed3\u4f4d\u8ba1\u7b97 Returns: Type Description float \u8d26\u6237\u53ef\u7528\u8d44\u91d1 principal : float property readonly \u00b6 \u8d26\u6237\u672c\u91d1 Returns: Type Description float \u672c\u91d1 __init__ ( self , url , acct , token , is_backtest = False , ** kwargs ) special \u00b6 \u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53 is_backtest \u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info \u5982\u679c url \u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46 is_backtest \u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Parameters: Name Type Description Default url \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 required acct \u5b50\u8d26\u53f7 required token \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c required is_backtest \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 False Keyword arguments: Name Type Description principal float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 Source code in traderclient/client.py def __init__ ( self , url : str , acct : str , token : str , is_backtest : bool = False , ** kwargs ): \"\"\"\u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53`is_backtest`\u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info: \u5982\u679c`url`\u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46`is_backtest`\u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Args: url : \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 acct : \u5b50\u8d26\u53f7 token : \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c is_backtest : \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 Keyword Args: principal: float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission: float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start: datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end: datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 \"\"\" # todo: capital is renamed to principal self . _url = url . rstrip ( \"/\" ) self . _token = token self . _account = acct self . headers = { \"Authorization\" : self . _token } self . headers [ \"Account\" ] = self . _account self . _is_backtest = is_backtest if is_backtest : principal = kwargs . get ( \"principal\" , 1_000_000 ) commission = kwargs . get ( \"commission\" , 1e-4 ) start = kwargs . get ( \"start\" ) end = kwargs . get ( \"end\" ) if start is None or end is None : raise ValueError ( \"start and end must be specified in backtest mode\" ) self . _start_backtest ( acct , token , principal , commission , start , end ) available_shares ( self , security ) \u00b6 \u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Parameters: Name Type Description Default security str \u80a1\u7968\u4ee3\u7801 required Returns: Type Description int \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 Source code in traderclient/client.py def available_shares ( self , security : str ) -> int : \"\"\"\u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Args: security: \u80a1\u7968\u4ee3\u7801 Returns: int: \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 \"\"\" # todo: remove available_shares from server routing url = self . _cmd_url ( \"positions\" ) r = get ( url , headers = self . headers ) found = r [ r [ \"security\" ] == security ] if found . size == 1 : return found [ \"sellable\" ][ 0 ] . item () elif found . size == 0 : return 0 else : logger . warning ( \"found more than one position entry in response: %s \" , found ) balance ( self ) \u00b6 \u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Type Description Dict \u8d26\u6237\u4f59\u989d\u4fe1\u606f available: \u73b0\u91d1 market_value: \u80a1\u7968\u5e02\u503c assets: \u8d26\u6237\u603b\u8d44\u4ea7 pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal Source code in traderclient/client.py def balance ( self ) -> Dict : \"\"\"\u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Dict: \u8d26\u6237\u4f59\u989d\u4fe1\u606f - available: \u73b0\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - assets: \u8d26\u6237\u603b\u8d44\u4ea7 - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal \"\"\" # todo: removed account # todo: removed /balance from server routing, using info instead # todo: total has been renamed to assets url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return { \"available\" : r [ \"available\" ], \"market_value\" : r [ \"market_value\" ], \"assets\" : r [ \"assets\" ], \"pnl\" : r [ \"pnl\" ], \"ppnl\" : r [ \"ppnl\" ], } bills ( self ) \u00b6 \u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Type Description Dict \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f trades positions assets tx Source code in traderclient/client.py def bills ( self ) -> Dict : \"\"\"\u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Dict: \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f - trades - positions - assets - tx \"\"\" url = self . _cmd_url ( \"bills\" ) return get ( url , headers = self . headers ) buy ( self , security , price , volume , timeout = 0.5 , ** kwargs ) \u00b6 \u8bc1\u5238\u4e70\u5165 Notes \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required price float \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 required volume int \u4e70\u5165\u80a1\u7968\u6570 required timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: 1 2 3 4 5 6 7 8 9 10 { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } Source code in traderclient/client.py def buy ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u8bc1\u5238\u4e70\u5165 Notes: \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"buy\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r cancel_all_entrusts ( self ) \u00b6 \u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Type Description Dict \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy Source code in traderclient/client.py def cancel_all_entrusts ( self ) -> Dict : \"\"\"\u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Dict: \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy \"\"\" # todo: check return type? url = self . _cmd_url ( \"cancel_all_entrusts\" ) return post_json ( url , headers = self . headers ) cancel_entrust ( self , cid ) \u00b6 \u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Parameters: Name Type Description Default cid str \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 required Returns: Type Description Dict \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003 buy \u7684\u7ed3\u679c Source code in traderclient/client.py def cancel_entrust ( self , cid : str ) -> Dict : \"\"\"\u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: cid (str): \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 Returns: Dict: \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003`buy`\u7684\u7ed3\u679c \"\"\" # todo: return type? url = self . _cmd_url ( \"cancel_entrust\" ) data = { \"cid\" : cid } return post_json ( url , params = data , headers = self . headers ) delete_account ( url_prefix , account_name , token ) staticmethod \u00b6 \u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Parameters: Name Type Description Default url_prefix str \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 required account_name str \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d required token str \u8d26\u6237token required Returns: Type Description int \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 Source code in traderclient/client.py @staticmethod def delete_account ( url_prefix : str , account_name : str , token : str ) -> int : \"\"\"\u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Args: url_prefix (str): \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 account_name (str): \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d token (str): \u8d26\u6237token Returns: \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : token } return delete ( url , headers = headers , params = { \"name\" : account_name }) info ( self ) \u00b6 \u8d26\u6237\u4fe1\u606f Returns: Type Description - name str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array Source code in traderclient/client.py def info ( self ) -> Dict : \"\"\"\u8d26\u6237\u4fe1\u606f Returns: - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" # todo: added pnl, ppnl. available, market_value # todo: removed trades # todo: rename capital to principal # todo: server should use r.raw to return pickled object url = self . _cmd_url ( \"info\" ) return get ( url , headers = self . headers ) list_accounts ( url_prefix , admin_token ) staticmethod \u00b6 \u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Parameters: Name Type Description Default url_prefix \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 required admin_token \u7ba1\u7406\u5458token required Returns: Type Description List \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373 info \u8fd4\u56de\u7684\u4fe1\u606f Source code in traderclient/client.py @staticmethod def list_accounts ( url_prefix : str , admin_token : str ) -> List : \"\"\"\u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Args: url_prefix : \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 admin_token : \u7ba1\u7406\u5458token Returns: \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373`info`\u8fd4\u56de\u7684\u4fe1\u606f \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : admin_token } return get ( url , headers = headers ) market_buy ( self , security , volume , order_type =< OrderType . MARKET : 2 > , limit_price = None , timeout = 0.5 , ** kwargs ) \u00b6 \u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: 1 2 3 4 \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required volume int \u4e70\u5165\u6570\u91cf required order_type OrderType \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. <OrderType.MARKET: 2> limit_price float \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 None timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def market_buy ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u4e70\u5165\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"market_buy\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r market_sell ( self , security , volume , order_type =< OrderType . MARKET : 2 > , limit_price = None , timeout = 0.5 , ** kwargs ) \u00b6 \u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required volume int \u5356\u51fa\u6570\u91cf required order_type OrderType \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. <OrderType.MARKET: 2> limit_price float \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 None timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def market_sell ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u5356\u51fa\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"market_sell\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r metrics ( self , start = None , end = None , baseline = None ) \u00b6 \u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Parameters: Name Type Description Default start date \u8d77\u59cb\u65e5\u671f None end date \u7ed3\u675f\u65e5\u671f None baseline str the security code for baseline None Returns: Type Description Dict \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 total_profit \u603b\u76c8\u4e8f total_profit_rate \u603b\u76c8\u4e8f\u7387 win_rate \u80dc\u7387 mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 sharpe \u590f\u666e\u6bd4\u7387 max_drawdown \u6700\u5927\u56de\u64a4 sortino calmar annual_return \u5e74\u5316\u6536\u76ca\u7387 volatility \u6ce2\u52a8\u7387 baseline: dict win_rate sharpe max_drawdown sortino annual_return total_profit_rate volatility Source code in traderclient/client.py def metrics ( self , start : datetime . date = None , end : datetime . date = None , baseline : str = None , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Args: start: \u8d77\u59cb\u65e5\u671f end: \u7ed3\u675f\u65e5\u671f baseline: the security code for baseline Returns: Dict: \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" url = self . _cmd_url ( \"metrics\" ) params = { \"start\" : start . strftime ( \"%Y-%m- %d \" ) if start else None , \"end\" : end . strftime ( \"%Y-%m- %d \" ) if end else None , \"baseline\" : baseline , } return get ( url , headers = self . headers , params = params ) positions ( self , dt = None ) \u00b6 \u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Parameters: Name Type Description Default dt date \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f None Returns: Type Description np.ndarray \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 Source code in traderclient/client.py def positions ( self , dt : datetime . date = None ) -> np . ndarray : \"\"\"\u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning: \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Args: dt: \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f Returns: np.ndarray: \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 \"\"\" # todo: \u8fd4\u56de\u7c7b\u578b\u66f4\u6539\u4e3anp.ndarray\uff0c\u5b57\u6bb5\u589e\u52a0alias # todo: \u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528r.raw\u6765\u8fd4\u56depickle\u5bf9\u8c61 url = self . _cmd_url ( \"positions\" ) r = get ( url , params = { \"date\" : dt }, headers = self . headers ) return r sell ( self , security , price , volume , timeout = 0.5 , ** kwargs ) \u00b6 \u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required price float \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa required volume int \u4e70\u5165\u80a1\u7968\u6570 required timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict or List \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def sell ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes: \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict or List: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"sell\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive for rec in r : rec [ \"time\" ] = arrow . get ( rec [ \"time\" ]) . naive return r sell_all ( self , percent , timeout = 0.5 ) \u00b6 \u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Parameters: Name Type Description Default percent float \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] required time_out int \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 required Returns: Type Description List \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c Source code in traderclient/client.py def sell_all ( self , percent : float , timeout : float = 0.5 ) -> List : \"\"\"\u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: List: \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None url = self . _cmd_url ( \"sell_all\" ) parameters = { \"percent\" : percent , \"timeout\" : timeout , } return post_json ( url , params = parameters , headers = self . headers ) sell_percent ( self , security , price , percent , timeout = 0.5 ) \u00b6 \u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Parameters: Name Type Description Default security str \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 required price float \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 required percent float \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] required time_out int \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 required Returns: Type Description Dict \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c Source code in traderclient/client.py def sell_percent ( self , security : str , price : float , percent : float , timeout : int = 0.5 ) -> Dict : \"\"\"\u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes: \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Args: security (str): \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 price (float): \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: Dict: \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None if len ( security ) < 6 : return None url = self . _cmd_url ( \"sell_percent\" ) parameters = { \"security\" : security , \"price\" : price , \"timeout\" : timeout , } r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r today_entrusts ( self ) \u00b6 \u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Type Description List \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy Source code in traderclient/client.py def today_entrusts ( self ) -> List : \"\"\"\u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: List: \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy \"\"\" url = self . _cmd_url ( \"today_entrusts\" ) return get ( url , headers = self . headers ) errors \u00b6 TradeError ( Exception ) \u00b6 \u4ea4\u6613\u4e2d\u7684\u5f02\u5e38 \u5f53\u6355\u83b7\u5f02\u5e38\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7status_code\u548cmessage\u5c5e\u6027\u6765\u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u548c\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\u3002 Source code in traderclient/errors.py class TradeError ( Exception ): \"\"\"\u4ea4\u6613\u4e2d\u7684\u5f02\u5e38 \u5f53\u6355\u83b7\u5f02\u5e38\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7status_code\u548cmessage\u5c5e\u6027\u6765\u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u548c\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\u3002 \"\"\" def __init__ ( self , code : int , message : str ): self . code = code self . message = message def __str__ ( self ): return f \" { self . message } : { self . args } \" transport \u00b6 delete ( url , params = None , headers = None ) \u00b6 \u4ece\u670d\u52a1\u5668\u4e0a\u5220\u9664\u8d44\u6e90 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params \u67e5\u8be2\u53c2\u6570 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def delete ( url , params = None , headers = None ) -> Any : \"\"\"\u4ece\u670d\u52a1\u5668\u4e0a\u5220\u9664\u8d44\u6e90 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : \u67e5\u8be2\u53c2\u6570 headers : \u989d\u5916\u7684header\u9009\u9879 Returns: \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . delete ( url , params = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result get ( url , params = None , headers = None ) \u00b6 \u53d1\u9001GET\u8bf7\u6c42\u5230\u4e0a\u6e38\u670d\u52a1\u63a5\u53e3 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def get ( url , params = None , headers = None ) -> Any : \"\"\"\u53d1\u9001GET\u8bf7\u6c42\u5230\u4e0a\u6e38\u670d\u52a1\u63a5\u53e3 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 headers : \u989d\u5916\u7684header\u9009\u9879 \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . get ( url , params = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result post_json ( url , params = None , headers = None ) \u00b6 \u4ee5POST\u53d1\u9001JSON\u6570\u636e\u8bf7\u6c42 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def post_json ( url , params = None , headers = None ) -> Any : \"\"\"\u4ee5POST\u53d1\u9001JSON\u6570\u636e\u8bf7\u6c42 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 headers : \u989d\u5916\u7684header\u9009\u9879 \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . post ( url , json = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result process_response_result ( rsp , cmd = None ) \u00b6 \u83b7\u53d6\u54cd\u5e94\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u68c0\u67e5\u7ed3\u679c\u5408\u6cd5\u6027 Parameters: Name Type Description Default rsp response HTTP response object required cmd str trade instuction None Exceptions: Type Description traderclient.errors.Error \u5982\u679c\u670d\u52a1\u5668\u8fd4\u56de\u72b6\u6001\u7801\u4e0d\u4e3a2xx\uff0c\u5219\u629b\u51fa\u9519\u8bef Source code in traderclient/transport.py def process_response_result ( rsp : httpx . Response , cmd : str = None ) -> Any : \"\"\"\u83b7\u53d6\u54cd\u5e94\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u68c0\u67e5\u7ed3\u679c\u5408\u6cd5\u6027 Args: rsp (response): HTTP response object cmd (str, optional): trade instuction Raises: traderclient.errors.Error: \u5982\u679c\u670d\u52a1\u5668\u8fd4\u56de\u72b6\u6001\u7801\u4e0d\u4e3a2xx\uff0c\u5219\u629b\u51fa\u9519\u8bef \"\"\" if cmd is None : cmd = get_cmd ( str ( rsp . url )) content_type = rsp . headers . get ( \"Content-Type\" ) # process 20x response, check response code first if status_ok ( rsp . status_code ): if content_type == \"application/json\" : return rsp . json () elif content_type . startswith ( \"text\" ): return rsp . text else : return pickle . loads ( rsp . content ) # http 1.1 allow us to extend http status code, so we choose 499 as our error code. The upstream server is currently built on top of sanic, it doesn't support customer reason phrase (always return \"Unknown Error\" if the status code is extened. So we have to use body to carry on reason phrase. if rsp . status_code == 499 : logger . warning ( \" %s failed: %s , %s \" , cmd , rsp . status_code , rsp . text ) raise TradeError ( rsp . status_code , rsp . text ) else : rsp . raise_for_status () types \u00b6 OrderSide ( IntEnum ) \u00b6 An enumeration. Source code in traderclient/types.py class OrderSide ( IntEnum ): BUY = 1 # \u80a1\u7968\u4e70\u5165 SELL = - 1 # \u80a1\u7968\u5356\u51fa OrderStatus ( IntEnum ) \u00b6 An enumeration. Source code in traderclient/types.py class OrderStatus ( IntEnum ): ERROR = - 1 # \u5f02\u5e38 NO_DEAL = 1 # \u672a\u6210\u4ea4 PARTIAL_TRANSACTION = 2 # #\u90e8\u5206\u6210\u4ea4 ALL_TRANSACTIONS = 3 # \u5168\u90e8\u6210\u4ea4 CANCEL_ALL_ORDERS = 4 # \u5168\u90e8\u64a4\u5355 OrderType ( IntEnum ) \u00b6 An enumeration. Source code in traderclient/types.py class OrderType ( IntEnum ): LIMIT = 1 # \u9650\u4ef7\u59d4\u6258 MARKET = 2 # \u5e02\u4ef7\u59d4\u6258","title":"API"},{"location":"api/#traderclient.client","text":"","title":"client"},{"location":"api/#traderclient.client.TraderClient","text":"\u5927\u5bcc\u7fc1\u5b9e\u76d8\u548c\u56de\u6d4b\u7684\u5ba2\u6237\u7aef\u3002 \u5728\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5148\u6784\u5efa\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u518d\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5e76\u5904\u7406 traderclient.errors.TradeError \u7684\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7 status_code \u548c message \u6765\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u4e00\u822c\u4f1a\u5728\u56de\u6d4b\u7ed3\u675f\u65f6\u8c03\u7528 metrics \u65b9\u6cd5\u6765\u67e5\u770b\u7b56\u7565\u8bc4\u4f30\u7ed3\u679c\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u67e5\u770b\u4fe1\u606f\uff0c\u53ef\u4ee5\u8c03\u7528 bills \u65b9\u6cd5\u6765\u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u3001\u4ea4\u6613\u8bb0\u5f55\u548c\u6bcf\u65e5\u8d44\u4ea7\u6570\u636e\u3002 Source code in traderclient/client.py class TraderClient : \"\"\"\u5927\u5bcc\u7fc1\u5b9e\u76d8\u548c\u56de\u6d4b\u7684\u5ba2\u6237\u7aef\u3002 \u5728\u4f7f\u7528\u5ba2\u6237\u7aef\u65f6\uff0c\u9700\u8981\u5148\u6784\u5efa\u5ba2\u6237\u7aef\u5b9e\u4f8b\uff0c\u518d\u8c03\u7528\u5176\u4ed6\u65b9\u6cd5\uff0c\u5e76\u5904\u7406[traderclient.errors.TradeError][]\u7684\u5f02\u5e38\uff0c\u53ef\u4ee5\u901a\u8fc7`status_code`\u548c`message`\u6765\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u4e00\u822c\u4f1a\u5728\u56de\u6d4b\u7ed3\u675f\u65f6\u8c03\u7528`metrics`\u65b9\u6cd5\u6765\u67e5\u770b\u7b56\u7565\u8bc4\u4f30\u7ed3\u679c\u3002\u5982\u679c\u8981\u8fdb\u4e00\u6b65\u67e5\u770b\u4fe1\u606f\uff0c\u53ef\u4ee5\u8c03\u7528`bills`\u65b9\u6cd5\u6765\u83b7\u53d6\u5386\u53f2\u6301\u4ed3\u3001\u4ea4\u6613\u8bb0\u5f55\u548c\u6bcf\u65e5\u8d44\u4ea7\u6570\u636e\u3002 \"\"\" def __init__ ( self , url : str , acct : str , token : str , is_backtest : bool = False , ** kwargs ): \"\"\"\u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53`is_backtest`\u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info: \u5982\u679c`url`\u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46`is_backtest`\u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Args: url : \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 acct : \u5b50\u8d26\u53f7 token : \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c is_backtest : \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 Keyword Args: principal: float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission: float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start: datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end: datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 \"\"\" # todo: capital is renamed to principal self . _url = url . rstrip ( \"/\" ) self . _token = token self . _account = acct self . headers = { \"Authorization\" : self . _token } self . headers [ \"Account\" ] = self . _account self . _is_backtest = is_backtest if is_backtest : principal = kwargs . get ( \"principal\" , 1_000_000 ) commission = kwargs . get ( \"commission\" , 1e-4 ) start = kwargs . get ( \"start\" ) end = kwargs . get ( \"end\" ) if start is None or end is None : raise ValueError ( \"start and end must be specified in backtest mode\" ) self . _start_backtest ( acct , token , principal , commission , start , end ) def _cmd_url ( self , cmd : str ) -> str : return f \" { self . _url } / { cmd } \" def _start_backtest ( self , acct : str , token : str , principal : float , commission : float , start : datetime . date , end : datetime . date , ): \"\"\"\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u8d26\u6237 Args: acct : \u8d26\u53f7\u540d token : \u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c principal : \u521d\u59cb\u8d44\u91d1 commission : \u624b\u7eed\u8d39\u7387 start : \u56de\u6d4b\u5f00\u59cb\u65e5\u671f end : \u56de\u6d4b\u7ed3\u675f\u65e5\u671f \"\"\" url = self . _cmd_url ( \"start_backtest\" ) data = { \"name\" : acct , \"token\" : token , \"principal\" : principal , \"commission\" : commission , \"start\" : start . isoformat (), \"end\" : end . isoformat (), } post_json ( url , data ) def info ( self ) -> Dict : \"\"\"\u8d26\u6237\u4fe1\u606f Returns: - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" # todo: added pnl, ppnl. available, market_value # todo: removed trades # todo: rename capital to principal # todo: server should use r.raw to return pickled object url = self . _cmd_url ( \"info\" ) return get ( url , headers = self . headers ) def balance ( self ) -> Dict : \"\"\"\u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Dict: \u8d26\u6237\u4f59\u989d\u4fe1\u606f - available: \u73b0\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - assets: \u8d26\u6237\u603b\u8d44\u4ea7 - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal \"\"\" # todo: removed account # todo: removed /balance from server routing, using info instead # todo: total has been renamed to assets url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return { \"available\" : r [ \"available\" ], \"market_value\" : r [ \"market_value\" ], \"assets\" : r [ \"assets\" ], \"pnl\" : r [ \"pnl\" ], \"ppnl\" : r [ \"ppnl\" ], } @property def account ( self ) -> str : return self . _account @property def available_money ( self ) -> float : \"\"\"\u53d6\u5f53\u524d\u8d26\u6237\u7684\u53ef\u7528\u91d1\u989d\u3002\u7b56\u7565\u51fd\u6570\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u6570\u636e\u8fdb\u884c\u4ed3\u4f4d\u8ba1\u7b97 Returns: float: \u8d26\u6237\u53ef\u7528\u8d44\u91d1 \"\"\" url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return r . get ( \"available\" ) @property def principal ( self ) -> float : \"\"\"\u8d26\u6237\u672c\u91d1 Returns: \u672c\u91d1 \"\"\" if self . _is_backtest : return self . _principal url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return r . get ( \"principal\" ) def positions ( self , dt : datetime . date = None ) -> np . ndarray : \"\"\"\u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning: \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Args: dt: \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f Returns: np.ndarray: \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 \"\"\" # todo: \u8fd4\u56de\u7c7b\u578b\u66f4\u6539\u4e3anp.ndarray\uff0c\u5b57\u6bb5\u589e\u52a0alias # todo: \u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528r.raw\u6765\u8fd4\u56depickle\u5bf9\u8c61 url = self . _cmd_url ( \"positions\" ) r = get ( url , params = { \"date\" : dt }, headers = self . headers ) return r def available_shares ( self , security : str ) -> int : \"\"\"\u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Args: security: \u80a1\u7968\u4ee3\u7801 Returns: int: \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 \"\"\" # todo: remove available_shares from server routing url = self . _cmd_url ( \"positions\" ) r = get ( url , headers = self . headers ) found = r [ r [ \"security\" ] == security ] if found . size == 1 : return found [ \"sellable\" ][ 0 ] . item () elif found . size == 0 : return 0 else : logger . warning ( \"found more than one position entry in response: %s \" , found ) def today_entrusts ( self ) -> List : \"\"\"\u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: List: \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy \"\"\" url = self . _cmd_url ( \"today_entrusts\" ) return get ( url , headers = self . headers ) def cancel_entrust ( self , cid : str ) -> Dict : \"\"\"\u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: cid (str): \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 Returns: Dict: \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003`buy`\u7684\u7ed3\u679c \"\"\" # todo: return type? url = self . _cmd_url ( \"cancel_entrust\" ) data = { \"cid\" : cid } return post_json ( url , params = data , headers = self . headers ) def cancel_all_entrusts ( self ) -> Dict : \"\"\"\u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Dict: \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy \"\"\" # todo: check return type? url = self . _cmd_url ( \"cancel_all_entrusts\" ) return post_json ( url , headers = self . headers ) def buy ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u8bc1\u5238\u4e70\u5165 Notes: \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"buy\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def market_buy ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u4e70\u5165\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"market_buy\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes: \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict or List: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"sell\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive for rec in r : rec [ \"time\" ] = arrow . get ( rec [ \"time\" ]) . naive return r def market_sell ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u5356\u51fa\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"market_sell\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell_percent ( self , security : str , price : float , percent : float , timeout : int = 0.5 ) -> Dict : \"\"\"\u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes: \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Args: security (str): \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 price (float): \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: Dict: \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None if len ( security ) < 6 : return None url = self . _cmd_url ( \"sell_percent\" ) parameters = { \"security\" : security , \"price\" : price , \"timeout\" : timeout , } r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r def sell_all ( self , percent : float , timeout : float = 0.5 ) -> List : \"\"\"\u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: List: \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None url = self . _cmd_url ( \"sell_all\" ) parameters = { \"percent\" : percent , \"timeout\" : timeout , } return post_json ( url , params = parameters , headers = self . headers ) def metrics ( self , start : datetime . date = None , end : datetime . date = None , baseline : str = None , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Args: start: \u8d77\u59cb\u65e5\u671f end: \u7ed3\u675f\u65e5\u671f baseline: the security code for baseline Returns: Dict: \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" url = self . _cmd_url ( \"metrics\" ) params = { \"start\" : start . strftime ( \"%Y-%m- %d \" ) if start else None , \"end\" : end . strftime ( \"%Y-%m- %d \" ) if end else None , \"baseline\" : baseline , } return get ( url , headers = self . headers , params = params ) def bills ( self ) -> Dict : \"\"\"\u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Dict: \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f - trades - positions - assets - tx \"\"\" url = self . _cmd_url ( \"bills\" ) return get ( url , headers = self . headers ) @staticmethod def list_accounts ( url_prefix : str , admin_token : str ) -> List : \"\"\"\u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Args: url_prefix : \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 admin_token : \u7ba1\u7406\u5458token Returns: \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373`info`\u8fd4\u56de\u7684\u4fe1\u606f \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : admin_token } return get ( url , headers = headers ) @staticmethod def delete_account ( url_prefix : str , account_name : str , token : str ) -> int : \"\"\"\u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Args: url_prefix (str): \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 account_name (str): \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d token (str): \u8d26\u6237token Returns: \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : token } return delete ( url , headers = headers , params = { \"name\" : account_name })","title":"TraderClient"},{"location":"api/#traderclient.client.TraderClient.available_money","text":"\u53d6\u5f53\u524d\u8d26\u6237\u7684\u53ef\u7528\u91d1\u989d\u3002\u7b56\u7565\u51fd\u6570\u53ef\u80fd\u9700\u8981\u8fd9\u4e2a\u6570\u636e\u8fdb\u884c\u4ed3\u4f4d\u8ba1\u7b97 Returns: Type Description float \u8d26\u6237\u53ef\u7528\u8d44\u91d1","title":"available_money"},{"location":"api/#traderclient.client.TraderClient.principal","text":"\u8d26\u6237\u672c\u91d1 Returns: Type Description float \u672c\u91d1","title":"principal"},{"location":"api/#traderclient.client.TraderClient.__init__","text":"\u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53 is_backtest \u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info \u5982\u679c url \u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46 is_backtest \u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Parameters: Name Type Description Default url \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 required acct \u5b50\u8d26\u53f7 required token \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c required is_backtest \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 False Keyword arguments: Name Type Description principal float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 Source code in traderclient/client.py def __init__ ( self , url : str , acct : str , token : str , is_backtest : bool = False , ** kwargs ): \"\"\"\u6784\u5efa\u4e00\u4e2a\u4ea4\u6613\u5ba2\u6237\u7aef \u5f53`is_backtest`\u4e3aTrue\u65f6\uff0c\u4f1a\u81ea\u52a8\u5728\u670d\u52a1\u7aef\u521b\u5efa\u65b0\u8d26\u6237\u3002 Info: \u5982\u679c`url`\u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46`is_backtest`\u8bbe\u7f6e\u4e3aFalse\uff0c\u4e14\u5982\u679c\u63d0\u4f9b\u7684\u8d26\u6237acct,token\u5728\u670d\u52a1\u5668\u7aef\u5b58\u5728\uff0c\u5219\u5c06\u91cd\u7528\u8be5\u8d26\u6237\uff0c\u8be5\u8d26\u6237\u4e4b\u524d\u7684\u4e00\u4e9b\u6570\u636e\u4ecd\u5c06\u4fdd\u7559\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u67d0\u4e9b\u9519\u8bef\uff0c\u7279\u522b\u662f\u7ee7\u7eed\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u65f6\u95f4\u53d1\u751frewind\u7684\u60c5\u51b5\u3002\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u60c5\u51b5\u53ea\u7528\u4e8e\u83b7\u53d6\u4e4b\u524d\u7684\u6d4b\u8bd5\u6570\u636e\u3002 Args: url : \u670d\u52a1\u5668\u5730\u5740\u53ca\u8def\u5f84\uff0c\u6bd4\u5982 http://localhost:port/trade/api/v1 acct : \u5b50\u8d26\u53f7 token : \u5b50\u8d26\u53f7\u5bf9\u5e94\u7684\u670d\u52a1\u5668\u8bbf\u95ee\u4ee4\u724c is_backtest : \u662f\u5426\u4e3a\u56de\u6d4b\u6a21\u5f0f\uff0c\u9ed8\u8ba4\u4e3aFalse\u3002 Keyword Args: principal: float \u521d\u59cb\u8d44\u91d1\uff0c\u9ed8\u8ba4\u4e3a1_000_000 commission: float \u624b\u7eed\u8d39\u7387\uff0c\u9ed8\u8ba4\u4e3a1e-4 start: datetime.date \u56de\u6d4b\u5f00\u59cb\u65e5\u671f\uff0c\u5fc5\u9009 end: datetime.date \u56de\u6d4b\u7ed3\u675f\u65e5\u671f\uff0c\u5fc5\u9009 \"\"\" # todo: capital is renamed to principal self . _url = url . rstrip ( \"/\" ) self . _token = token self . _account = acct self . headers = { \"Authorization\" : self . _token } self . headers [ \"Account\" ] = self . _account self . _is_backtest = is_backtest if is_backtest : principal = kwargs . get ( \"principal\" , 1_000_000 ) commission = kwargs . get ( \"commission\" , 1e-4 ) start = kwargs . get ( \"start\" ) end = kwargs . get ( \"end\" ) if start is None or end is None : raise ValueError ( \"start and end must be specified in backtest mode\" ) self . _start_backtest ( acct , token , principal , commission , start , end )","title":"__init__()"},{"location":"api/#traderclient.client.TraderClient.available_shares","text":"\u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Parameters: Name Type Description Default security str \u80a1\u7968\u4ee3\u7801 required Returns: Type Description int \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 Source code in traderclient/client.py def available_shares ( self , security : str ) -> int : \"\"\"\u8fd4\u56de\u67d0\u652f\u80a1\u7968\u5f53\u524d\u53ef\u7528\u6570\u91cf \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u4f7f\u7528\u6301\u4ed3\u8868\u6700\u540e\u4e00\u65e5\u7684\u8bb0\u5f55\u8fdb\u884c\u8fc7\u6ee4\u3002 Args: security: \u80a1\u7968\u4ee3\u7801 Returns: int: \u6307\u5b9a\u80a1\u7968\u4eca\u65e5\u53ef\u5356\u6570\u91cf\uff0c\u65e0\u53ef\u5356\u5373\u4e3a0 \"\"\" # todo: remove available_shares from server routing url = self . _cmd_url ( \"positions\" ) r = get ( url , headers = self . headers ) found = r [ r [ \"security\" ] == security ] if found . size == 1 : return found [ \"sellable\" ][ 0 ] . item () elif found . size == 0 : return 0 else : logger . warning ( \"found more than one position entry in response: %s \" , found )","title":"available_shares()"},{"location":"api/#traderclient.client.TraderClient.balance","text":"\u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Type Description Dict \u8d26\u6237\u4f59\u989d\u4fe1\u606f available: \u73b0\u91d1 market_value: \u80a1\u7968\u5e02\u503c assets: \u8d26\u6237\u603b\u8d44\u4ea7 pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal Source code in traderclient/client.py def balance ( self ) -> Dict : \"\"\"\u53d6\u8be5\u8d26\u53f7\u5bf9\u5e94\u7684\u8d26\u6237\u4f59\u989d\u4fe1\u606f Returns: Dict: \u8d26\u6237\u4f59\u989d\u4fe1\u606f - available: \u73b0\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - assets: \u8d26\u6237\u603b\u8d44\u4ea7 - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal \"\"\" # todo: removed account # todo: removed /balance from server routing, using info instead # todo: total has been renamed to assets url = self . _cmd_url ( \"info\" ) r = get ( url , headers = self . headers ) return { \"available\" : r [ \"available\" ], \"market_value\" : r [ \"market_value\" ], \"assets\" : r [ \"assets\" ], \"pnl\" : r [ \"pnl\" ], \"ppnl\" : r [ \"ppnl\" ], }","title":"balance()"},{"location":"api/#traderclient.client.TraderClient.bills","text":"\u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Type Description Dict \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f trades positions assets tx Source code in traderclient/client.py def bills ( self ) -> Dict : \"\"\"\u83b7\u53d6\u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f\u3002 Returns: Dict: \u8d26\u6237\u7684\u4ea4\u6613\u3001\u6301\u4ed3\u3001\u5e02\u503c\u6d41\u6c34\u4fe1\u606f - trades - positions - assets - tx \"\"\" url = self . _cmd_url ( \"bills\" ) return get ( url , headers = self . headers )","title":"bills()"},{"location":"api/#traderclient.client.TraderClient.buy","text":"\u8bc1\u5238\u4e70\u5165 Notes \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required price float \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 required volume int \u4e70\u5165\u80a1\u7968\u6570 required timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: 1 2 3 4 5 6 7 8 9 10 { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } Source code in traderclient/client.py def buy ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u8bc1\u5238\u4e70\u5165 Notes: \u6ce8\u610f\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u8fd4\u56de\u5b57\u6bb5\u5c11\u4e8e\u5b9e\u76d8\u3002 \u4f7f\u7528\u56de\u6d4b\u670d\u52a1\u5668\u65f6\uff0c\u65e0\u8bba\u6210\u4ea4\u5b9e\u9645\u4e0a\u662f\u5728\u54ea\u4e9b\u65f6\u95f4\u70b9\u53d1\u751f\u7684\uff0c\u90fd\u4f7f\u7528order_time\u3002\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u5219\u4f1a\u5206\u522b\u8fd4\u56decreate_at, recv_at\u4e24\u4e2a\u5b57\u6bb5 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u65f6\uff0c\u5982\u679cprice\u6307\u5b9a\u4e3aNone\uff0c\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u4e70\u5165 volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de \u5b9e\u76d8\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5\uff1a { \"request_id\" : \"uuid\", # \u59d4\u6258\u5728z trader system\u4e2d\u7684\u60df\u4e00ID \"cid\" : \"xxx-xxxx-xxx\", # \u5238\u5546\u7ed9\u51fa\u7684\u5408\u540c\u7f16\u53f7\uff0c\u5185\u90e8\u540d\u4e3aentrust_no \"security\": \"000001.XSHE\", \"price\": 5.10, # \u59d4\u6258\u4ef7\u683c \"volume\": 1000, # \u59d4\u6258\u91cf \"order_side\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"order_type\": 1, # \u6210\u4ea4\u65b9\u5411\uff0c1\u9650\u4ef7\uff0c2\u5e02\u4ef7 \"status\": 3, # \u6267\u884c\u72b6\u6001\uff0c1\u5df2\u62a5\uff0c2\u90e8\u5206\u6210\u4ea4\uff0c3\u6210\u4ea4\uff0c4\u5df2\u64a4 \"eid\": \"xx-xxx-xx\", # \u59d4\u6258\u56de\u62a5(\u6210\u4ea4\u540e\uff09id\uff0c\u5238\u5546\u7ed9\u51fa \"filled\": 500, # \u5df2\u6210\u4ea4\u91cf \"filled_vwap\": 5.12, # \u5df2\u6210\u4ea4\u5747\u4ef7\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"filled_value\": 2560, # \u6210\u4ea4\u989d\uff0c\u4e0d\u5305\u62ec\u7a0e\u8d39 \"trade_fees\": 12.4, # \u4ea4\u6613\u7a0e\u8d39\uff0c\u5305\u62ec\u4f63\u91d1\u3001\u5370\u82b1\u7a0e\u3001\u6742\u8d39\u7b49 \"reason\": \"\", # \u5982\u679c\u59d4\u6258\u5931\u8d25\uff0c\u539f\u56e0\uff1f \"created_at\": \"2022-03-23 14:55:00.1000\", # \u59d4\u6258\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c \"recv_at\": \"2022-03-23 14:55:00.1000\", # \u4ea4\u6613\u6267\u884c\u65f6\u95f4\uff0c\u5e26\u6beb\u79d2\u503c } \u56de\u6d4b\u65f6\u5c06\u53ea\u8fd4\u56de\u4ee5\u4e0b\u5b57\u6bb5: { \"tid\": \u6210\u4ea4\u53f7 \"eid\": \u59d4\u6258\u53f7 \"security\": \u8bc1\u5238\u4ee3\u7801 \"order_side\": \u6210\u4ea4\u65b9\u5411\uff0c1\u4e70\uff0c-1\u5356 \"price\": \u6210\u4ea4\u4ef7\u683c \"filled\": \u5df2\u6210\u4ea4\u91cf \"time\": \u6210\u4ea4\u65f6\u95f4 \"trade_fees\": \u4ea4\u6613\u8d39\u7528 } \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"buy\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r","title":"buy()"},{"location":"api/#traderclient.client.TraderClient.cancel_all_entrusts","text":"\u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Type Description Dict \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy Source code in traderclient/client.py def cancel_all_entrusts ( self ) -> Dict : \"\"\"\u64a4\u9500\u5f53\u524d\u6240\u6709\u672a\u5b8c\u6210\u7684\u59d4\u6258\uff0c\u5305\u62ec\u90e8\u5206\u6210\u4ea4\uff0c\u4e0d\u540c\u4ea4\u6613\u7cfb\u7edf\u5b9e\u73b0\u4e0d\u540c \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Dict: \u88ab\u64a4\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u540cbuy \"\"\" # todo: check return type? url = self . _cmd_url ( \"cancel_all_entrusts\" ) return post_json ( url , headers = self . headers )","title":"cancel_all_entrusts()"},{"location":"api/#traderclient.client.TraderClient.cancel_entrust","text":"\u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Parameters: Name Type Description Default cid str \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 required Returns: Type Description Dict \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003 buy \u7684\u7ed3\u679c Source code in traderclient/client.py def cancel_entrust ( self , cid : str ) -> Dict : \"\"\"\u64a4\u9500\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: cid (str): \u4ea4\u6613\u670d\u52a1\u5668\u8fd4\u56de\u7684\u59d4\u6258\u5408\u540c\u53f7 Returns: Dict: \u88ab\u53d6\u6d88\u7684\u59d4\u6258\u7684\u4fe1\u606f\uff0c\u53c2\u8003`buy`\u7684\u7ed3\u679c \"\"\" # todo: return type? url = self . _cmd_url ( \"cancel_entrust\" ) data = { \"cid\" : cid } return post_json ( url , params = data , headers = self . headers )","title":"cancel_entrust()"},{"location":"api/#traderclient.client.TraderClient.delete_account","text":"\u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Parameters: Name Type Description Default url_prefix str \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 required account_name str \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d required token str \u8d26\u6237token required Returns: Type Description int \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 Source code in traderclient/client.py @staticmethod def delete_account ( url_prefix : str , account_name : str , token : str ) -> int : \"\"\"\u5220\u9664\u8d26\u6237 \u4ec5\u56de\u6d4b\u6a21\u5f0f\u4e0b\u5b9e\u73b0\u3002 \u6b64API\u4e0d\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002\u53ea\u8981\u77e5\u9053\u8d26\u6237\u540d\u548ctoken\u5373\u53ef\u5220\u9664\u8d26\u6237\u3002\u5bf9\u7ba1\u7406\u5458\u8981\u5220\u9664\u8d26\u6237\u7684\uff0c\u53ef\u4ee5\u5148\u901a\u8fc7\u7ba1\u7406\u5458\u8d26\u6237\u5217\u4e3e\u6240\u6709\u8d26\u6237\uff0c\u5f97\u5230\u8d26\u6237\u548ctoken\u540e\u518d\u5220\u9664\u3002 Args: url_prefix (str): \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 account_name (str): \u5f85\u5220\u9664\u7684\u8d26\u6237\u540d token (str): \u8d26\u6237token Returns: \u670d\u52a1\u5668\u4e0a\u5269\u4f59\u8d26\u6237\u4e2a\u6570 \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : token } return delete ( url , headers = headers , params = { \"name\" : account_name })","title":"delete_account()"},{"location":"api/#traderclient.client.TraderClient.info","text":"\u8d26\u6237\u4fe1\u606f Returns: Type Description - name str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array Source code in traderclient/client.py def info ( self ) -> Dict : \"\"\"\u8d26\u6237\u4fe1\u606f Returns: - name: str, \u8d26\u6237\u540d - principal: float, \u521d\u59cb\u8d44\u91d1 - assets: float, \u5f53\u524d\u8d44\u4ea7 - start: datetime.date, \u8d26\u6237\u521b\u5efa\u65f6\u95f4 - last_trade: datetime.datetime, \u6700\u540e\u4e00\u7b14\u4ea4\u6613\u65f6\u95f4 - available: float, \u53ef\u7528\u8d44\u91d1 - market_value: \u80a1\u7968\u5e02\u503c - pnl: \u76c8\u4e8f(\u7edd\u5bf9\u503c) - ppnl: \u76c8\u4e8f(\u767e\u5206\u6bd4)\uff0c\u5373pnl/principal - positions: \u5f53\u524d\u6301\u4ed3\uff0cdtype\u4e3aposition_dtype\u7684numpy structured array \"\"\" # todo: added pnl, ppnl. available, market_value # todo: removed trades # todo: rename capital to principal # todo: server should use r.raw to return pickled object url = self . _cmd_url ( \"info\" ) return get ( url , headers = self . headers )","title":"info()"},{"location":"api/#traderclient.client.TraderClient.list_accounts","text":"\u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Parameters: Name Type Description Default url_prefix \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 required admin_token \u7ba1\u7406\u5458token required Returns: Type Description List \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373 info \u8fd4\u56de\u7684\u4fe1\u606f Source code in traderclient/client.py @staticmethod def list_accounts ( url_prefix : str , admin_token : str ) -> List : \"\"\"\u5217\u4e3e\u670d\u52a1\u5668\u4e0a\u6240\u6709\u8d26\u6237\uff08\u4e0d\u5305\u542b\u7ba1\u7406\u5458\u8d26\u6237\uff09 \u6b64\u547d\u4ee4\u9700\u8981\u7ba1\u7406\u5458\u6743\u9650\u3002 Args: url_prefix : \u670d\u52a1\u5668\u5730\u5740\u53ca\u524d\u7f00 admin_token : \u7ba1\u7406\u5458token Returns: \u8d26\u6237\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u4fe1\u606f\u5373`info`\u8fd4\u56de\u7684\u4fe1\u606f \"\"\" url = f \" { url_prefix } /accounts\" headers = { \"Authorization\" : admin_token } return get ( url , headers = headers )","title":"list_accounts()"},{"location":"api/#traderclient.client.TraderClient.market_buy","text":"\u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: 1 2 3 4 \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required volume int \u4e70\u5165\u6570\u91cf required order_type OrderType \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. <OrderType.MARKET: 2> limit_price float \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 None timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def market_buy ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u4e70\u5165\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4\u6d88\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5e02\u4ef7\u4e70\u5165\u76f8\u5f53\u4e8e\u6301\u6da8\u505c\u4ef7\u8fdb\u884c\u64ae\u5408\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u5fc5\u987b\u63d0\u4f9border_time\u53c2\u6570\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u4e70\u5165\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u4e70\u5165\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? if volume != volume // 100 * 100 : volume = volume // 100 * 100 logger . warning ( \"\u4e70\u5165\u6570\u91cf\u5fc5\u987b\u662f100\u7684\u500d\u6570, \u5df2\u53d6\u6574\u5230 %d \" , volume ) url = self . _cmd_url ( \"market_buy\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r","title":"market_buy()"},{"location":"api/#traderclient.client.TraderClient.market_sell","text":"\u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required volume int \u5356\u51fa\u6570\u91cf required order_type OrderType \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. <OrderType.MARKET: 2> limit_price float \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 None timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def market_sell ( self , security : str , volume : int , order_type : OrderType = OrderType . MARKET , limit_price : float = None , timeout : float = 0.5 , ** kwargs , ) -> Dict : \"\"\"\u5e02\u4ef7\u5356\u51fa\u80a1\u7968 Notes: \u540c\u82b1\u987a\u7ec8\u7aef\u9700\u8981\u6539\u4e3a\u6da8\u8dcc\u505c\u9650\u4ef7\uff0c\u6398\u91d1\u5ba2\u6237\u7aef\u652f\u6301\u5e02\u4ef7\u4ea4\u6613\uff0c\u6398\u91d1\u7cfb\u7edf\u9ed8\u8ba4\u4e94\u6863\u6210\u4ea4\u5269\u64a4 \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u5e02\u4ef7\u5356\u51fa\u610f\u5473\u7740\u4ee5\u8dcc\u505c\u4ef7\u6302\u5355\u8fdb\u884c\u64ae\u5408\u3002 \u76ee\u524d\u6a21\u62df\u76d8\u548c\u5b9e\u76d8\u6a21\u5f0f\u4e0b\u6ca1\u6709\u5b9e\u73b0\u9650\u4ef7\u3002 Args: security (str): \u8bc1\u5238\u4ee3\u7801 volume (int): \u5356\u51fa\u6570\u91cf order_type (OrderType, optional): \u5e02\u4ef7\u5356\u51fa\u7c7b\u578b\uff0c\u7f3a\u7701\u4e3a\u4e94\u6863\u6210\u4ea4\u5269\u64a4. limit_price (float, optional): \u5269\u4f59\u8f6c\u9650\u4ef7\u7684\u6a21\u5f0f\u4e0b\uff0c\u8bbe\u7f6e\u7684\u9650\u4ef7 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"market_sell\" ) parameters = { \"security\" : security , \"price\" : 0 , \"volume\" : volume , \"order_type\" : order_type , \"timeout\" : timeout , \"limit_price\" : limit_price , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r","title":"market_sell()"},{"location":"api/#traderclient.client.TraderClient.metrics","text":"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Parameters: Name Type Description Default start date \u8d77\u59cb\u65e5\u671f None end date \u7ed3\u675f\u65e5\u671f None baseline str the security code for baseline None Returns: Type Description Dict \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 total_profit \u603b\u76c8\u4e8f total_profit_rate \u603b\u76c8\u4e8f\u7387 win_rate \u80dc\u7387 mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 sharpe \u590f\u666e\u6bd4\u7387 max_drawdown \u6700\u5927\u56de\u64a4 sortino calmar annual_return \u5e74\u5316\u6536\u76ca\u7387 volatility \u6ce2\u52a8\u7387 baseline: dict win_rate sharpe max_drawdown sortino annual_return total_profit_rate volatility Source code in traderclient/client.py def metrics ( self , start : datetime . date = None , end : datetime . date = None , baseline : str = None , ) -> Dict : \"\"\"\u83b7\u53d6\u6307\u5b9a\u65f6\u95f4\u6bb5[start, end]\u95f4\u7684\u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e Args: start: \u8d77\u59cb\u65e5\u671f end: \u7ed3\u675f\u65e5\u671f baseline: the security code for baseline Returns: Dict: \u8d26\u6237\u6307\u6807\u8bc4\u4f30\u6570\u636e - start \u56de\u6d4b\u8d77\u59cb\u65f6\u95f4 - end \u56de\u6d4b\u7ed3\u675f\u65f6\u95f4 - window \u8d44\u4ea7\u66b4\u9732\u65f6\u95f4 - total_tx \u53d1\u751f\u7684\u914d\u5bf9\u4ea4\u6613\u6b21\u6570 - total_profit \u603b\u76c8\u4e8f - total_profit_rate \u603b\u76c8\u4e8f\u7387 - win_rate \u80dc\u7387 - mean_return \u6bcf\u7b14\u914d\u5bf9\u4ea4\u6613\u5e73\u5747\u56de\u62a5\u7387 - sharpe \u590f\u666e\u6bd4\u7387 - max_drawdown \u6700\u5927\u56de\u64a4 - sortino - calmar - annual_return \u5e74\u5316\u6536\u76ca\u7387 - volatility \u6ce2\u52a8\u7387 - baseline: dict - win_rate - sharpe - max_drawdown - sortino - annual_return - total_profit_rate - volatility \"\"\" url = self . _cmd_url ( \"metrics\" ) params = { \"start\" : start . strftime ( \"%Y-%m- %d \" ) if start else None , \"end\" : end . strftime ( \"%Y-%m- %d \" ) if end else None , \"baseline\" : baseline , } return get ( url , headers = self . headers , params = params )","title":"metrics()"},{"location":"api/#traderclient.client.TraderClient.positions","text":"\u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Parameters: Name Type Description Default dt date \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f None Returns: Type Description np.ndarray \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 Source code in traderclient/client.py def positions ( self , dt : datetime . date = None ) -> np . ndarray : \"\"\"\u53d6\u8be5\u5b50\u8d26\u6237\u5f53\u524d\u6301\u4ed3\u4fe1\u606f Warning: \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6301\u4ed3\u4fe1\u606f\u4e0d\u5305\u542balias\u5b57\u6bb5 Args: dt: \u6307\u5b9a\u65e5\u671f\uff0c\u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u53d6\u5f53\u524d\u65e5\u671f\uff08\u6700\u65b0\uff09\u7684\u6301\u4ed3\u4fe1\u606f Returns: np.ndarray: \u6301\u4ed3\u4fe1\u606f\uff0c\u5305\u542bsecurity, alias, shares, sellable\u548cprice\u5b57\u6bb5\u7684numpy structured array\u3002\u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u5219\u4e0d\u5305\u542balias\u5b57\u6bb5 \"\"\" # todo: \u8fd4\u56de\u7c7b\u578b\u66f4\u6539\u4e3anp.ndarray\uff0c\u5b57\u6bb5\u589e\u52a0alias # todo: \u670d\u52a1\u5668\u5e94\u8be5\u4f7f\u7528r.raw\u6765\u8fd4\u56depickle\u5bf9\u8c61 url = self . _cmd_url ( \"positions\" ) r = get ( url , params = { \"date\" : dt }, headers = self . headers ) return r","title":"positions()"},{"location":"api/#traderclient.client.TraderClient.sell","text":"\u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Parameters: Name Type Description Default security str \u8bc1\u5238\u4ee3\u7801 required price float \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa required volume int \u4e70\u5165\u80a1\u7968\u6570 required timeout float \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 0.5 Keyword arguments: Name Type Description order_time Union[str, datetime.datetime] \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Type Description Dict or List \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1 buy \u65b9\u6cd5 Source code in traderclient/client.py def sell ( self , security : str , price : float , volume : int , timeout : float = 0.5 , ** kwargs ) -> Dict : \"\"\"\u4ee5\u9650\u4ef7\u65b9\u5f0f\u5356\u51fa\u80a1\u7968 Notes: \u5982\u679c\u662f\u56de\u6d4b\u6a21\u5f0f\uff0c\u8fd8\u9700\u8981\u4f20\u5165order_time\uff0c\u56e0\u4e3a\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u670d\u52a1\u5668\u662f\u4e0d\u53ef\u80fd\u77e5\u9053\u4e0b\u5355\u8fd9\u4e00\u523b\u7684\u65f6\u95f4\u7684\u3002\u5982\u679c\u670d\u52a1\u5668\u662f\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u5219\u8fd4\u56de\u7684\u6570\u636e\u4e3a\u591a\u4e2a\u6210\u4ea4\u8bb0\u5f55\u7684\u5217\u8868\uff08\u5373\u4f7f\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff09 Args: security (str): \u8bc1\u5238\u4ee3\u7801 price (float): \u4e70\u5165\u4ef7\u683c\uff08\u9650\u4ef7\uff09\u3002\u5728\u56de\u6d4b\u4e2d\u5982\u679c\u6307\u5b9a\u4e3aNone,\u5c06\u8f6c\u6362\u4e3a\u5e02\u4ef7\u5356\u51fa volume (int): \u4e70\u5165\u80a1\u7968\u6570 timeout (float, optional): \u9ed8\u8ba4\u7b49\u5f85\u4ea4\u6613\u53cd\u9988\u7684\u8d85\u65f6\u4e3a0.5\u79d2 Keyword Args: order_time Union[str, datetime.datetime]: \u4e0b\u5355\u65f6\u95f4\u3002\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u3002 Returns: Dict or List: \u6210\u4ea4\u8fd4\u56de\uff0c\u8be6\u89c1`buy`\u65b9\u6cd5 \"\"\" # todo: check return type? url = self . _cmd_url ( \"sell\" ) parameters = { \"security\" : security , \"price\" : price , \"volume\" : volume , \"timeout\" : timeout , ** kwargs , } if self . _is_backtest : assert \"order_time\" in kwargs , \"order_time is required in backtest mode\" order_time = kwargs [ \"order_time\" ] if isinstance ( order_time , datetime . datetime ): order_time = order_time . strftime ( \"%Y-%m- %d %H:%M:%S\" ) parameters [ \"order_time\" ] = order_time r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive for rec in r : rec [ \"time\" ] = arrow . get ( rec [ \"time\" ]) . naive return r","title":"sell()"},{"location":"api/#traderclient.client.TraderClient.sell_all","text":"\u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Parameters: Name Type Description Default percent float \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] required time_out int \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 required Returns: Type Description List \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c Source code in traderclient/client.py def sell_all ( self , percent : float , timeout : float = 0.5 ) -> List : \"\"\"\u5c06\u6240\u6709\u6301\u4ed3\u6309percent\u6bd4\u4f8b\u8fdb\u884c\u51cf\u4ed3\uff0c\u7528\u4e8e\u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u5feb\u901f\u51cf\u4ed3\uff08\u57fa\u4e8e\u53ef\u4e70\u80a1\u7968\u6570\uff09 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Args: percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: List: \u6240\u6709\u5356\u51fa\u80a1\u7968\u7684\u59d4\u6258\u5355\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None url = self . _cmd_url ( \"sell_all\" ) parameters = { \"percent\" : percent , \"timeout\" : timeout , } return post_json ( url , params = parameters , headers = self . headers )","title":"sell_all()"},{"location":"api/#traderclient.client.TraderClient.sell_percent","text":"\u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Parameters: Name Type Description Default security str \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 required price float \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 required percent float \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] required time_out int \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 required Returns: Type Description Dict \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c Source code in traderclient/client.py def sell_percent ( self , security : str , price : float , percent : float , timeout : int = 0.5 ) -> Dict : \"\"\"\u6309\u6bd4\u4f8b\u5356\u51fa\u7279\u5b9a\u7684\u80a1\u7968\uff08\u57fa\u4e8e\u53ef\u5356\u80a1\u7968\u6570\uff09\uff0c\u6bd4\u4f8b\u7684\u6570\u5b57\u7531\u8c03\u7528\u8005\u63d0\u4f9b Notes: \u6ce8\u610f\u5b9e\u73b0\u4e2d\u5b58\u5728\u53d6\u6574\u95ee\u9898\u3002\u6bd4\u5982\u67d0\u652f\u80a1\u7968\u5f53\u524d\u6709500\u80a1\u53ef\u5356\uff0c\u5982\u679cpercent=0.3\uff0c\u5219\u8981\u6c42\u5356\u51fa150\u80a1\u3002\u5b9e\u9645\u4e0a\u5356\u51fa\u7684\u5c06\u662f100\u80a1\u3002 Args: security (str): \u7279\u5b9a\u7684\u80a1\u7968\u4ee3\u7801 price (float): \u5e02\u4ef7\u5356\u51fa\uff0c\u4ef7\u683c\u53c2\u6570\u53ef\u4e3a0 percent (float): \u8c03\u7528\u8005\u7ed9\u51fa\u7684\u767e\u5206\u6bd4\uff0c(0, 1] time_out (int, optional): \u7f3a\u7701\u8d85\u65f6\u4e3a0.5\u79d2 Returns: Dict: \u80a1\u7968\u5356\u51fa\u59d4\u6258\u5355\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4e8esell\u6307\u4ee4\u76f8\u540c \"\"\" if percent <= 0 or percent > 1 : return None if len ( security ) < 6 : return None url = self . _cmd_url ( \"sell_percent\" ) parameters = { \"security\" : security , \"price\" : price , \"timeout\" : timeout , } r = post_json ( url , params = parameters , headers = self . headers ) for key in ( \"time\" , \"created_at\" , \"recv_at\" ): if key in r : r [ key ] = arrow . get ( r [ key ]) . naive return r","title":"sell_percent()"},{"location":"api/#traderclient.client.TraderClient.today_entrusts","text":"\u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: Type Description List \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy Source code in traderclient/client.py def today_entrusts ( self ) -> List : \"\"\"\u67e5\u8be2\u8d26\u6237\u5f53\u65e5\u6240\u6709\u59d4\u6258\uff0c\u5305\u62ec\u5931\u8d25\u7684\u59d4\u6258 \u6b64API\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e0d\u53ef\u7528\u3002 Returns: List: \u59d4\u6258\u4fe1\u606f\u6570\u7ec4\uff0c\u5404\u5143\u7d20\u5b57\u6bb5\u53c2\u8003buy \"\"\" url = self . _cmd_url ( \"today_entrusts\" ) return get ( url , headers = self . headers )","title":"today_entrusts()"},{"location":"api/#traderclient.errors","text":"","title":"errors"},{"location":"api/#traderclient.errors.TradeError","text":"\u4ea4\u6613\u4e2d\u7684\u5f02\u5e38 \u5f53\u6355\u83b7\u5f02\u5e38\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7status_code\u548cmessage\u5c5e\u6027\u6765\u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u548c\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\u3002 Source code in traderclient/errors.py class TradeError ( Exception ): \"\"\"\u4ea4\u6613\u4e2d\u7684\u5f02\u5e38 \u5f53\u6355\u83b7\u5f02\u5e38\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7status_code\u548cmessage\u5c5e\u6027\u6765\u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u548c\u8be6\u7ec6\u9519\u8bef\u4fe1\u606f\u3002 \"\"\" def __init__ ( self , code : int , message : str ): self . code = code self . message = message def __str__ ( self ): return f \" { self . message } : { self . args } \"","title":"TradeError"},{"location":"api/#traderclient.transport","text":"","title":"transport"},{"location":"api/#traderclient.transport.delete","text":"\u4ece\u670d\u52a1\u5668\u4e0a\u5220\u9664\u8d44\u6e90 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params \u67e5\u8be2\u53c2\u6570 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def delete ( url , params = None , headers = None ) -> Any : \"\"\"\u4ece\u670d\u52a1\u5668\u4e0a\u5220\u9664\u8d44\u6e90 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : \u67e5\u8be2\u53c2\u6570 headers : \u989d\u5916\u7684header\u9009\u9879 Returns: \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . delete ( url , params = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result","title":"delete()"},{"location":"api/#traderclient.transport.get","text":"\u53d1\u9001GET\u8bf7\u6c42\u5230\u4e0a\u6e38\u670d\u52a1\u63a5\u53e3 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def get ( url , params = None , headers = None ) -> Any : \"\"\"\u53d1\u9001GET\u8bf7\u6c42\u5230\u4e0a\u6e38\u670d\u52a1\u63a5\u53e3 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 headers : \u989d\u5916\u7684header\u9009\u9879 \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . get ( url , params = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result","title":"get()"},{"location":"api/#traderclient.transport.post_json","text":"\u4ee5POST\u53d1\u9001JSON\u6570\u636e\u8bf7\u6c42 Parameters: Name Type Description Default url \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f required params JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 None headers \u989d\u5916\u7684header\u9009\u9879 None Source code in traderclient/transport.py def post_json ( url , params = None , headers = None ) -> Any : \"\"\"\u4ee5POST\u53d1\u9001JSON\u6570\u636e\u8bf7\u6c42 Args: url : \u76ee\u6807URL\uff0c\u5e26\u670d\u52a1\u5668\u4fe1\u606f params : JSON\u683c\u5f0f\u7684\u53c2\u6570\u6e05\u5355 headers : \u989d\u5916\u7684header\u9009\u9879 \"\"\" if headers is None : headers = { \"Request-ID\" : uuid . uuid4 () . hex } else : headers . update ({ \"Request-ID\" : uuid . uuid4 () . hex }) rsp = httpx . post ( url , json = params , headers = headers ) action = get_cmd ( url ) result = process_response_result ( rsp , action ) return result","title":"post_json()"},{"location":"api/#traderclient.transport.process_response_result","text":"\u83b7\u53d6\u54cd\u5e94\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u68c0\u67e5\u7ed3\u679c\u5408\u6cd5\u6027 Parameters: Name Type Description Default rsp response HTTP response object required cmd str trade instuction None Exceptions: Type Description traderclient.errors.Error \u5982\u679c\u670d\u52a1\u5668\u8fd4\u56de\u72b6\u6001\u7801\u4e0d\u4e3a2xx\uff0c\u5219\u629b\u51fa\u9519\u8bef Source code in traderclient/transport.py def process_response_result ( rsp : httpx . Response , cmd : str = None ) -> Any : \"\"\"\u83b7\u53d6\u54cd\u5e94\u4e2d\u7684\u6570\u636e\uff0c\u5e76\u68c0\u67e5\u7ed3\u679c\u5408\u6cd5\u6027 Args: rsp (response): HTTP response object cmd (str, optional): trade instuction Raises: traderclient.errors.Error: \u5982\u679c\u670d\u52a1\u5668\u8fd4\u56de\u72b6\u6001\u7801\u4e0d\u4e3a2xx\uff0c\u5219\u629b\u51fa\u9519\u8bef \"\"\" if cmd is None : cmd = get_cmd ( str ( rsp . url )) content_type = rsp . headers . get ( \"Content-Type\" ) # process 20x response, check response code first if status_ok ( rsp . status_code ): if content_type == \"application/json\" : return rsp . json () elif content_type . startswith ( \"text\" ): return rsp . text else : return pickle . loads ( rsp . content ) # http 1.1 allow us to extend http status code, so we choose 499 as our error code. The upstream server is currently built on top of sanic, it doesn't support customer reason phrase (always return \"Unknown Error\" if the status code is extened. So we have to use body to carry on reason phrase. if rsp . status_code == 499 : logger . warning ( \" %s failed: %s , %s \" , cmd , rsp . status_code , rsp . text ) raise TradeError ( rsp . status_code , rsp . text ) else : rsp . raise_for_status ()","title":"process_response_result()"},{"location":"api/#traderclient.types","text":"","title":"types"},{"location":"api/#traderclient.types.OrderSide","text":"An enumeration. Source code in traderclient/types.py class OrderSide ( IntEnum ): BUY = 1 # \u80a1\u7968\u4e70\u5165 SELL = - 1 # \u80a1\u7968\u5356\u51fa","title":"OrderSide"},{"location":"api/#traderclient.types.OrderStatus","text":"An enumeration. Source code in traderclient/types.py class OrderStatus ( IntEnum ): ERROR = - 1 # \u5f02\u5e38 NO_DEAL = 1 # \u672a\u6210\u4ea4 PARTIAL_TRANSACTION = 2 # #\u90e8\u5206\u6210\u4ea4 ALL_TRANSACTIONS = 3 # \u5168\u90e8\u6210\u4ea4 CANCEL_ALL_ORDERS = 4 # \u5168\u90e8\u64a4\u5355","title":"OrderStatus"},{"location":"api/#traderclient.types.OrderType","text":"An enumeration. Source code in traderclient/types.py class OrderType ( IntEnum ): LIMIT = 1 # \u9650\u4ef7\u59d4\u6258 MARKET = 2 # \u5e02\u4ef7\u59d4\u6258","title":"OrderType"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Aaron Yang code@jieyu.ai Contributors \u00b6 None yet. Why not be the first?","title":"Authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Aaron Yang code@jieyu.ai","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/zillionare/traderclient/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 zillionare-trader-client could always use more documentation, whether as part of the official zillionare-trader-client docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/zillionare/traderclient/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up traderclient for local development. Fork the traderclient repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/traderclient.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/traderclient/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_traderclient ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/zillionare/traderclient/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"zillionare-trader-client could always use more documentation, whether as part of the official zillionare-trader-client docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/zillionare/traderclient/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up traderclient for local development. Fork the traderclient repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/traderclient.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/zillionare/traderclient/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_traderclient ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"developer/","text":"\u901a\u4fe1 \u00b6 \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u4f7f\u7528http\u8fdb\u884c\u901a\u4fe1\u3002\u901a\u8fc7Authorization\u643a\u5e26token\uff0c\u53ef\u4ee5\u63a7\u5236\u8bbf\u95ee\u6743\u9650\u3002\u901a\u8fc7Request-ID\u6765\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\u3002 \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u4f20\u56de\u6570\u636e\u65f6\uff0c\u4e00\u822c\u4f7f\u7528json\uff0c\u4f46\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5ba2\u6237\u7aef\u5bf9\u65e5\u671f\u65f6\u95f4\u9700\u8981\u7279\u522b\u8fdb\u884c\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u5bf9\u4ee5\u4e0bAPI\uff0c\u7ea6\u5b9a\u4f7f\u7528pickle\u8fdb\u884c\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff1a info positions metrics \u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u4f20\u8f93\u7684\u5bf9\u8c61\uff0c\u90fd\u662f\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982\u65e5\u671f\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5b57\u5178\u548cnumpy\u6570\u7ec4\u7b49\uff0c\u4e0d\u5305\u542b\u5927\u5bcc\u7fc1\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u3002 \u9519\u8bef\u5904\u7406 \u00b6 \u4f7f\u7528\u6807\u51c6\u7684HTTP status code\u6765\u8868\u793a\u72b6\u6001\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de200\u3002\u7531\u4e8e\u67d0\u4e9b\u670d\u52a1\u5668\u5f53\u524d\u8fd8\u4e0d\u80fd\u901a\u8fc7reason_phrase(RFC 2616)\u6765\u8fd4\u56de\u89e3\u91ca\u6027\u7684\u9519\u8bef\u539f\u56e0\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u9519\u8bef\u7801499\u6765\u8fdb\u884c\u534f\u8bae\u6269\u5c55\u3002\u5f53\u670d\u52a1\u5668\u6709\u989d\u5916\u4fe1\u606f\u9700\u8981\u8fd4\u56de\u65f6\uff0c\u4f20\u56de\u4e00\u4e2a499\u7684\u9519\u8bef\u7801\uff0c\u6b64\u65f6\u5ba2\u6237\u7aef\u4f1a\u8bfb\u53d6Response\u7684body\u6587\u672c\uff0c\u629b\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3atraderclient.errors.TradeError\u7684\u5f02\u5e38\u3002 \u6d4b\u8bd5\u73af\u5883 \u00b6 zillionare-backtest\u4e3a\u5f00\u53d1\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e\u5bb9\u5668\u7684\u6d4b\u8bd5\u73af\u5883\uff0c\u5728tox.ini\u4e2d\u5b9a\u4e49\uff1a 1 2 3 4 commands = /usr/bin/sh ./stop_service.sh /usr/bin/sh ./start_service.sh pytest -s --cov=traderclient --cov-append --cov-report=xml --cov-report term-missing tests \u5728start_service.sh\u4e2d\uff0c\u521b\u5efa\u4e86\u4e00\u4e2atox-bt-net\uff0c\u5e76\u4e14\u5c06redis, influxdb\u548cbacktest\u670d\u52a1\u5668\u8fde\u63a5\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e0a\u3002\u6700\u7ec8\uff0c\u60a8\u53ea\u9700\u8981\u5c06 url \u6307\u5411backtest\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u5730\u5740\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 echo \"\u521d\u59cb\u5316redis\u5bb9\u5668\" sudo docker run -d --name tox-redis -p 6379:6379 redis echo \"\u521d\u59cb\u5316influxdb\u5bb9\u5668\" sudo docker run -d -p 8086:8086 --name tox-influxdb influxdb sleep 5 sudo docker exec -i tox-influxdb bash -c 'influx setup --username my-user --password my-password --org my-org --bucket my-bucket --token my-token --force' sleep 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest docker network create tox-bt-net docker network connect --alias redis tox-bt-net tox-redis docker network connect --alias influxdb tox-bt-net tox-influxdb docker network connect --alias bt tox-bt-net tox-bt \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 backtest-server","title":"Developer"},{"location":"developer/#\u901a\u4fe1","text":"\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u4e4b\u95f4\u4f7f\u7528http\u8fdb\u884c\u901a\u4fe1\u3002\u901a\u8fc7Authorization\u643a\u5e26token\uff0c\u53ef\u4ee5\u63a7\u5236\u8bbf\u95ee\u6743\u9650\u3002\u901a\u8fc7Request-ID\u6765\u9632\u6b62\u91cd\u590d\u63d0\u4ea4\u3002 \u670d\u52a1\u5668\u5411\u5ba2\u6237\u7aef\u4f20\u56de\u6570\u636e\u65f6\uff0c\u4e00\u822c\u4f7f\u7528json\uff0c\u4f46\u8fd9\u6837\u4f1a\u5bfc\u81f4\u5ba2\u6237\u7aef\u5bf9\u65e5\u671f\u65f6\u95f4\u9700\u8981\u7279\u522b\u8fdb\u884c\u89e3\u6790\u3002\u56e0\u6b64\uff0c\u5bf9\u4ee5\u4e0bAPI\uff0c\u7ea6\u5b9a\u4f7f\u7528pickle\u8fdb\u884c\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\uff1a info positions metrics \u901a\u8fc7\u8fd9\u4e9b\u63a5\u53e3\u4f20\u8f93\u7684\u5bf9\u8c61\uff0c\u90fd\u662f\u5e38\u89c1\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982\u65e5\u671f\u3001\u6570\u5b57\u3001\u5b57\u7b26\u4e32\u3001\u5217\u8868\u3001\u5b57\u5178\u548cnumpy\u6570\u7ec4\u7b49\uff0c\u4e0d\u5305\u542b\u5927\u5bcc\u7fc1\u5b9a\u4e49\u7684\u6570\u636e\u7c7b\u578b\u3002","title":"\u901a\u4fe1"},{"location":"developer/#\u9519\u8bef\u5904\u7406","text":"\u4f7f\u7528\u6807\u51c6\u7684HTTP status code\u6765\u8868\u793a\u72b6\u6001\uff0c\u5982\u679c\u6210\u529f\u5219\u8fd4\u56de200\u3002\u7531\u4e8e\u67d0\u4e9b\u670d\u52a1\u5668\u5f53\u524d\u8fd8\u4e0d\u80fd\u901a\u8fc7reason_phrase(RFC 2616)\u6765\u8fd4\u56de\u89e3\u91ca\u6027\u7684\u9519\u8bef\u539f\u56e0\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u9519\u8bef\u7801499\u6765\u8fdb\u884c\u534f\u8bae\u6269\u5c55\u3002\u5f53\u670d\u52a1\u5668\u6709\u989d\u5916\u4fe1\u606f\u9700\u8981\u8fd4\u56de\u65f6\uff0c\u4f20\u56de\u4e00\u4e2a499\u7684\u9519\u8bef\u7801\uff0c\u6b64\u65f6\u5ba2\u6237\u7aef\u4f1a\u8bfb\u53d6Response\u7684body\u6587\u672c\uff0c\u629b\u51fa\u4e00\u4e2a\u7c7b\u578b\u4e3atraderclient.errors.TradeError\u7684\u5f02\u5e38\u3002","title":"\u9519\u8bef\u5904\u7406"},{"location":"developer/#\u6d4b\u8bd5\u73af\u5883","text":"zillionare-backtest\u4e3a\u5f00\u53d1\u63d0\u4f9b\u4e86\u4e00\u4e2a\u57fa\u4e8e\u5bb9\u5668\u7684\u6d4b\u8bd5\u73af\u5883\uff0c\u5728tox.ini\u4e2d\u5b9a\u4e49\uff1a 1 2 3 4 commands = /usr/bin/sh ./stop_service.sh /usr/bin/sh ./start_service.sh pytest -s --cov=traderclient --cov-append --cov-report=xml --cov-report term-missing tests \u5728start_service.sh\u4e2d\uff0c\u521b\u5efa\u4e86\u4e00\u4e2atox-bt-net\uff0c\u5e76\u4e14\u5c06redis, influxdb\u548cbacktest\u670d\u52a1\u5668\u8fde\u63a5\u5728\u8fd9\u4e2a\u7f51\u7edc\u4e0a\u3002\u6700\u7ec8\uff0c\u60a8\u53ea\u9700\u8981\u5c06 url \u6307\u5411backtest\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u5730\u5740\u5373\u53ef\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 echo \"\u521d\u59cb\u5316redis\u5bb9\u5668\" sudo docker run -d --name tox-redis -p 6379:6379 redis echo \"\u521d\u59cb\u5316influxdb\u5bb9\u5668\" sudo docker run -d -p 8086:8086 --name tox-influxdb influxdb sleep 5 sudo docker exec -i tox-influxdb bash -c 'influx setup --username my-user --password my-password --org my-org --bucket my-bucket --token my-token --force' sleep 1 docker run -d --name tox-bt -e MODE=TEST -e PORT=3180 -p 3180:3180 backtest docker network create tox-bt-net docker network connect --alias redis tox-bt-net tox-redis docker network connect --alias influxdb tox-bt-net tox-influxdb docker network connect --alias bt tox-bt-net tox-bt \u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u8003 backtest-server","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"history/","text":"History \u00b6 0.1.0 (2022-03-07) \u00b6 First release on PyPI. 0.3.5 (2022-05-27) \u00b6 Use http status code to determine if the request was successful, rather than wrap status in payload, and raise TradeError if there's exception. Rename capital to principal, tradeclient to TraderClient Use binary to convey data between server/client for interface position , info , metrics balance , available_money , assets interface will all goto /info endpoint position and available_shares interface will all goto /position endpoint Add documentation","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2022-03-07","text":"First release on PyPI.","title":"0.1.0 (2022-03-07)"},{"location":"history/#035-2022-05-27","text":"Use http status code to determine if the request was successful, rather than wrap status in payload, and raise TradeError if there's exception. Rename capital to principal, tradeclient to TraderClient Use binary to convey data between server/client for interface position , info , metrics balance , available_money , assets interface will all goto /info endpoint position and available_shares interface will all goto /position endpoint Add documentation","title":"0.3.5 (2022-05-27)"},{"location":"installation/","text":"\u5b89\u88c5 \u00b6 \u7a33\u5b9a\u7248\u672c \u00b6 \u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u5b89\u88c5traderclient: 1 $ pip install zillionare-trader-client \u914d\u7f6e \u00b6 \u8fd0\u884ctrader client\u65f6\uff0c\u9700\u8981\u63d0\u4f9b\u4ea4\u6613\u670d\u52a1\u5668(zillionare-trader-server\u6216\u8005zillionare-backtest-server)\u7684\u5730\u5740\u3002\u5982\u679c\u9700\u8981\u7ba1\u7406\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u8fd8\u9700\u8981\u63d0\u4f9badmin\u8d26\u6237\u7684token\u3002","title":"Installation"},{"location":"installation/#\u5b89\u88c5","text":"","title":"\u5b89\u88c5"},{"location":"installation/#\u7a33\u5b9a\u7248\u672c","text":"\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u4ee5\u5b89\u88c5traderclient: 1 $ pip install zillionare-trader-client","title":"\u7a33\u5b9a\u7248\u672c"},{"location":"installation/#\u914d\u7f6e","text":"\u8fd0\u884ctrader client\u65f6\uff0c\u9700\u8981\u63d0\u4f9b\u4ea4\u6613\u670d\u52a1\u5668(zillionare-trader-server\u6216\u8005zillionare-backtest-server)\u7684\u5730\u5740\u3002\u5982\u679c\u9700\u8981\u7ba1\u7406\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u8fd8\u9700\u8981\u63d0\u4f9badmin\u8d26\u6237\u7684token\u3002","title":"\u914d\u7f6e"},{"location":"usage/","text":"\u4ee5\u4e0b\u4ee3\u7801\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528trader-client: 1 2 3 4 5 6 7 8 9 10 11 from traderclient import TraderClient import uuid # \u8bf7\u6307\u5411zillionare trader server\u6216\u8005backtest server url = \"http://localhost:7080/trader/api/v0.3\" account = \"test-account\" token = uuid . uuid4 () . hex client : TraderClient = TraderClient ( url , account , token ) code = \"000001.XSHE\" r = client . buy ( code , 9.5 , 100 ) \u4e0a\u8ff0\u4ee3\u7801\u6784\u5efa\u4e86\u4e00\u4e2a\u5b9e\u65f6\u4ea4\u6613\u5ba2\u6237\u7aef\uff08\u5373\u5b9e\u76d8\u4ea4\u6613\u6216\u8005\u6a21\u62df\u76d8\u4ea4\u6613\uff0c\u5bf9\u5e94\u4e8e\u56de\u6d4b\uff09\uff0c\u5e76\u4e14\u8c03\u7528\u4e86 buy \u65b9\u6cd5\uff0c\u8d2d\u4e70\u4e86\u4e00\u624b\u80a1\u7968\u3002\u6ce8\u610f\u6211\u4eec\u4f7f\u7528\u7684\u8bc1\u5238\u4ee3\u7801\u5fc5\u987b\u5305\u542b\u4ea4\u6613\u6240\u6807\u5fd7\u3002\".XSHE\"\u8868\u793a\u6df1\u4ea4\u6240\uff0c\".XSHG\"\u8868\u793a\u4e0a\u4ea4\u6240\u3002 \u8fd9\u91cc\u7684account\u548ctoken\u9700\u8981\u7531zillionare-trader-server\u6765\u5206\u914d\u548c\u914d\u7f6e\u3002 \u5728\u8fdb\u884c\u56de\u6d4b\u65f6\uff0c\u53ea\u9700\u8981\u5728\u6784\u5efaTraderClient\u65f6\uff0c\u4f20\u5165 is_backtest = True\uff0c\u5e76\u4e14\u5c06 url \u6307\u5411\u56de\u6d4b\u670d\u52a1\u5668\u5373\u53ef\u3002\u56de\u6d4b\u670d\u52a1\u5668\u4f1a\u4f7f\u7528\u60a8\u63d0\u4f9b\u7684 account \u4e0e token \u751f\u6210\u4e00\u4e2a\u65b0\u7684\u56de\u6d4b\u8d26\u6237\uff0c\u540e\u9762\u6240\u6709\u7684\u56de\u6d4b\u90fd\u5c06\u5728\u8fd9\u4e2a\u73af\u5883\u4e0b\u6267\u884c\u3002 Info \u5982\u679c url \u6307\u5411\u4e86\u56de\u6d4b\u670d\u52a1\u5668\uff0c\u4f46\u6784\u9020TraderClient\u65f6\u5e76\u6ca1\u6709\u6307\u5b9a is_backtest \u4e3aTrue\uff0c\u5219\u56de\u6d4b\u670d\u52a1\u5668\u5c06\u590d\u7528\u5bf9\u5e94\u7684account\u3002\u8fd9\u79cd\u573a\u666f\u4e3b\u8981\u7528\u4e8e\u4e8b\u540e\u83b7\u53d6\u56de\u6d4b\u6570\u636e\uff0c\u8bf7\u6ce8\u610f\uff0c\u4e0d\u8981\u5728\u6b64\u60c5\u5f62\u4e0b\u5f00\u59cb\u65b0\u4e00\u8f6e\u7684\u56de\u6d4b\u3002\u4efb\u4f55\u4e00\u8f6e\u65b0\u7684\u56de\u6d4b\uff0c\u90fd\u59cb\u7ec8\u5e94\u8be5\u4f7f\u7528\u5168\u65b0\u7684\u56de\u6d4b\u73af\u5883\u3002 1 2 3 4 5 6 7 8 9 10 11 from traderclient import TraderClient import uuid import datetime url = \"http://localhost:7080/backtest-trader/api/v0.2\" account = \"my great strategy-v1\" token = uuid . uuid4 () . hex client : TraderClient = TraderClient ( url , account , token , is_backtest = True , principal = 1_000_000 , commission = 1.5e-4 ) code = \"000001.XSHE\" r = client . buy ( code , 9.5 , 100 , order_time = datetime . datetime ( 2022 , 5 , 9 , 9 , 31 )) \u6ce8\u610f\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u60a8\u53ef\u4ee5\u6307\u5b9a\u672c\u91d1\u548c\u624b\u7eed\u8d39\uff0c\u4f46\u8ba1\u7b97alpha\u7b49\u6307\u6807\u4f7f\u7528\u7684risk_free\u5229\u7387\u5219\u662f\u5728\u56de\u6d4b\u670d\u52a1\u5668\u4e0a\u914d\u7f6e\u7684\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u6bd4\u8f83\u4e0d\u540c\u7b56\u7565\u7684\u6570\u636e\u8868\u73b0\u3002 \u53e6\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u5730\u65b9\u662f\uff0c\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4e70\u5356\u80a1\u7968\uff0c\u5fc5\u987b\u4f20\u5165 order_time \uff0c\u539f\u56e0\u662f\uff0c\u5728\u5b9e\u76d8\u6a21\u5f0f\u4e0b\uff0c\u4e0b\u5355\u65f6\u95f4\u603b\u662f\u5f53\u524d\u65f6\u95f4\uff0c\u800c\u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\uff0c\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u5728\u8fc7\u53bb\u7684\u67d0\u4e00\u4e2a\u65f6\u95f4\u70b9\u8fdb\u884c\u4e0b\u5355\uff0c\u800c\u8fd9\u4e2a\u65f6\u95f4\u70b9\uff0c\u53ea\u6709\u7b56\u7565\u77e5\u9053\uff0c\u56de\u6d4b\u670d\u52a1\u5668\u4e0d\u53ef\u80fd\u77e5\u9053\u3002 \u5728\u56de\u6d4b\u6a21\u5f0f\u4e0b\u4f7f\u7528\u5176\u5b83API\u65f6\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u6839\u636e\u5177\u4f53\u60c5\u51b5\uff0c\u4f20\u5165\u201c\u5f53\u524d\u65f6\u95f4\u201d\u6216\u8005\u5bf9\u5e94\u7684\u65f6\u95f4\u70b9\u3002\u56de\u6d4b\u6a21\u5f0f\u4e0b\u7684\u201c\u73b0\u5728\u201d\uff0c\u4e00\u822c\u662f\u6307\u670d\u52a1\u5668\u6700\u540e\u63a5\u6536\u7684\u4e00\u4e2a buy \u6216\u8005 sell \u6307\u4ee4\u4e2d\u7684\u65f6\u95f4\u3002 \u4ea4\u6613 \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7 buy , market_buy , sell , market_sell \u548c sell_percent \u6765\u8fdb\u884c\u4ea4\u6613\u3002 \u72b6\u6001\u8ddf\u8e2a \u00b6 \u60a8\u53ef\u4ee5\u901a\u8fc7 info \u6765\u67e5\u770b\u8d26\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u603b\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u672c\u91d1\u3001\u76c8\u5229\u7b49\u3002\u5982\u679c\u60a8\u53ea\u60f3\u5f97\u5230\u5355\u4e2a\u4fe1\u606f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 principal \u3001 balance \u3001 available_money \u6765\u83b7\u53d6\u3002 positions \u63d0\u4f9b\u4e86\u6301\u4ed3\u4fe1\u606f\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 available_shares \u6765\u67e5\u8be2\u4e2a\u80a1\u5f53\u524d\u53ef\u552e\u7684\u80a1\u7968\u6570\u91cf\u3002 bills \u6765\u67e5\u770b\u8d26\u6237\u7684\u6301\u4ed3\u3001\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55\u3002 \u7b56\u7565\u8bc4\u4f30 \u00b6 metrics \u65b9\u6cd5\u5c06\u8fd4\u56de\u7b56\u7565\u7684\u5404\u9879\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, win rate, max drawdown\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u53c2\u8003\u6807\u7684\uff0cbacktest\u5c06\u5bf9\u53c2\u8003\u6807\u7684\u4e5f\u540c\u6837\u8ba1\u7b97\u4e0a\u8ff0\u6307\u6807\u3002","title":"Usage"},{"location":"usage/#\u4ea4\u6613","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 buy , market_buy , sell , market_sell \u548c sell_percent \u6765\u8fdb\u884c\u4ea4\u6613\u3002","title":"\u4ea4\u6613"},{"location":"usage/#\u72b6\u6001\u8ddf\u8e2a","text":"\u60a8\u53ef\u4ee5\u901a\u8fc7 info \u6765\u67e5\u770b\u8d26\u6237\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u6bd4\u5982\u5f53\u524d\u603b\u8d44\u4ea7\u3001\u6301\u4ed3\u3001\u672c\u91d1\u3001\u76c8\u5229\u7b49\u3002\u5982\u679c\u60a8\u53ea\u60f3\u5f97\u5230\u5355\u4e2a\u4fe1\u606f\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 principal \u3001 balance \u3001 available_money \u6765\u83b7\u53d6\u3002 positions \u63d0\u4f9b\u4e86\u6301\u4ed3\u4fe1\u606f\uff0c\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 available_shares \u6765\u67e5\u8be2\u4e2a\u80a1\u5f53\u524d\u53ef\u552e\u7684\u80a1\u7968\u6570\u91cf\u3002 bills \u6765\u67e5\u770b\u8d26\u6237\u7684\u6301\u4ed3\u3001\u4ea4\u6613\u5386\u53f2\u8bb0\u5f55\u3002","title":"\u72b6\u6001\u8ddf\u8e2a"},{"location":"usage/#\u7b56\u7565\u8bc4\u4f30","text":"metrics \u65b9\u6cd5\u5c06\u8fd4\u56de\u7b56\u7565\u7684\u5404\u9879\u6307\u6807\uff0c\u6bd4\u5982sharpe, sortino, calmar, win rate, max drawdown\u7b49\u3002\u60a8\u8fd8\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u53c2\u8003\u6807\u7684\uff0cbacktest\u5c06\u5bf9\u53c2\u8003\u6807\u7684\u4e5f\u540c\u6837\u8ba1\u7b97\u4e0a\u8ff0\u6307\u6807\u3002","title":"\u7b56\u7565\u8bc4\u4f30"}]}